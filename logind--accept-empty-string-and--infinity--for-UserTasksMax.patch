commit eb88ad8bcca101a7ed5b1b9a3376318cbc2f2963
Author: Tejun Heo <tj@kernel.org>
Date:   Fri Jul 29 17:30:52 2016 -0400

    yummy:patchX:logind--accept-empty-string-and--infinity--for-UserTasksMax.patch

logind: accept empty string and "infinity" for UserTasksMax

    
    logind gets pids.max setting via UserTasksMax but its parsing function was
    different from systemd's TasksMax in that it didn't accept empty string and
    "infinity" making it difficult ot specify unlimited.  Update
    config_parse_user_tasks_max() so that it behaves the same way.
    
    While at it, replace opencoded (uint64_t) -1 with CGROUP_LIMIT_MAX in TasksMax
    handling.

diff --git a/man/logind.conf.xml b/man/logind.conf.xml
index adba5a4..cbee833 100644
--- a/man/logind.conf.xml
+++ b/man/logind.conf.xml
@@ -318,8 +318,9 @@
         <listitem><para>Sets the maximum number of OS tasks each user may run concurrently. This controls the
         <varname>TasksMax=</varname> setting of the per-user slice unit, see
         <citerefentry><refentrytitle>systemd.resource-control</refentrytitle><manvolnum>5</manvolnum></citerefentry>
-        for details. Defaults to 33%, which equals 10813 with the kernel's defaults on the host, but might be smaller
-        in OS containers.</para></listitem>
+        for details. If assigned the special value <literal>infinity</literal>, no tasks limit is applied.
+        Defaults to 33%, which equals 10813 with the kernel's defaults on the host, but might be smaller in
+        OS containers.</para></listitem>
       </varlistentry>
 
       <varlistentry>
diff --git a/src/core/cgroup.c b/src/core/cgroup.c
index c19e43f..3fd6fce 100644
--- a/src/core/cgroup.c
+++ b/src/core/cgroup.c
@@ -844,7 +844,7 @@ static void cgroup_context_apply(Unit *u, CGroupMask mask, ManagerState state) {
 
         if ((mask & CGROUP_MASK_PIDS) && !is_root) {
 
-                if (c->tasks_max != (uint64_t) -1) {
+                if (c->tasks_max != CGROUP_LIMIT_MAX) {
                         char buf[DECIMAL_STR_MAX(uint64_t) + 2];
 
                         sprintf(buf, "%" PRIu64 "\n", c->tasks_max);
diff --git a/src/core/load-fragment.c b/src/core/load-fragment.c
index a36953f..9383aab 100644
--- a/src/core/load-fragment.c
+++ b/src/core/load-fragment.c
@@ -2857,7 +2857,7 @@ int config_parse_tasks_max(
         int r;
 
         if (isempty(rvalue) || streq(rvalue, "infinity")) {
-                *tasks_max = (uint64_t) -1;
+                *tasks_max = CGROUP_LIMIT_MAX;
                 return 0;
         }
 
diff --git a/src/login/logind-user.c b/src/login/logind-user.c
index 348e396..e1d1265 100644
--- a/src/login/logind-user.c
+++ b/src/login/logind-user.c
@@ -26,6 +26,7 @@
 #include "bus-common-errors.h"
 #include "bus-error.h"
 #include "bus-util.h"
+#include "cgroup-util.h"
 #include "clean-ipc.h"
 #include "conf-parser.h"
 #include "escape.h"
@@ -891,7 +892,13 @@ int config_parse_user_tasks_max(
         assert(rvalue);
         assert(data);
 
-        /* First, try to parse as percentage */
+        /* Unlimited? */
+        if (isempty(rvalue) || streq(rvalue, "infinity")) {
+                *m = CGROUP_LIMIT_MAX;
+                return 0;
+        }
+
+        /* Try to parse as percentage */
         r = parse_percent(rvalue);
         if (r > 0 && r < 100)
                 k = system_tasks_max_scale(r, 100U);
