diff -rup systemd-233/man/systemd.exec.xml systemd-233-new/man/systemd.exec.xml
--- systemd-233/man/systemd.exec.xml	2017-03-01 22:43:06.000000000 +0100
+++ systemd-233-new/man/systemd.exec.xml	2017-03-14 16:33:38.099878612 +0100
@@ -1203,6 +1203,26 @@
       </varlistentry>
 
       <varlistentry>
+        <term><varname>UseRootFileSystemNamespace=</varname></term>
+
+        <listitem><para>Takes a boolean argument (default is false).
+        Forces unit's process to start in the same file system namespace
+        as init (the namespace of systemd). Setting this option to
+        <literal>true</literal> disables all file system related options,
+        namely:
+        (<varname>MountFlags=</varname>,
+        <varname>PrivateTmp=</varname>,
+        <varname>PrivateDevices=</varname>,
+        <varname>ProtectSystem=</varname>,
+        <varname>ProtectHome=</varname>,
+        <varname>ReadOnlyPaths=</varname>,
+        <varname>InaccessiblePaths=</varname> and
+        <varname>ReadWritePaths=</varname>). If any of these options
+        is set, the unit is deemed incorrectly configured.
+        </para></listitem>
+      </varlistentry>
+
+      <varlistentry>
         <term><varname>MountFlags=</varname></term>
 
         <listitem><para>Takes a mount propagation flag: <option>shared</option>, <option>slave</option> or
diff -rup systemd-233/src/core/execute.c systemd-233-new/src/core/execute.c
--- systemd-233/src/core/execute.c	2017-03-01 22:43:06.000000000 +0100
+++ systemd-233-new/src/core/execute.c	2017-03-14 16:35:11.276863140 +0100
@@ -2613,7 +2613,9 @@ static int exec_child(
                 }
         }
 
-        needs_mount_namespace = exec_needs_mount_namespace(context, params, runtime);
+        needs_mount_namespace =
+                !context->use_root_file_system_namespace &&
+                exec_needs_mount_namespace(context, params, runtime);
         if (needs_mount_namespace) {
                 r = apply_mount_namespace(unit, command, context, params, runtime);
                 if (r < 0) {
diff -rup systemd-233/src/core/execute.h systemd-233-new/src/core/execute.h
--- systemd-233/src/core/execute.h	2017-03-01 22:43:06.000000000 +0100
+++ systemd-233-new/src/core/execute.h	2017-03-14 16:35:39.227858499 +0100
@@ -180,6 +180,7 @@ struct ExecContext {
         bool private_users;
         ProtectSystem protect_system;
         ProtectHome protect_home;
+        bool use_root_file_system_namespace;
         bool protect_kernel_tunables;
         bool protect_kernel_modules;
         bool protect_control_groups;
diff -rup systemd-233/src/core/load-fragment.c systemd-233-new/src/core/load-fragment.c
--- systemd-233/src/core/load-fragment.c	2017-03-01 22:43:06.000000000 +0100
+++ systemd-233-new/src/core/load-fragment.c	2017-03-14 16:10:08.284034368 +0100
@@ -4137,6 +4137,25 @@ int config_parse_protect_system(
         return 0;
 }
 
+static bool verify_mount_ns_config(const ExecContext* context) {
+    assert(context);
+
+    if (!context->use_root_file_system_namespace)
+            return true;
+
+    if (context->private_tmp ||
+        context->private_devices ||
+        context->protect_system != PROTECT_SYSTEM_NO ||
+        context->protect_home != PROTECT_HOME_NO ||
+        context->mount_flags != 0 ||
+        !strv_isempty(context->read_write_paths) ||
+        !strv_isempty(context->read_only_paths) ||
+        !strv_isempty(context->inaccessible_paths))
+            return false;
+
+    return true;
+}
+
 #define FOLLOW_MAX 8
 
 static int open_follow(char **filename, FILE **_f, Set *names, char **_final) {
@@ -4365,6 +4384,16 @@ static int load_from_path(Unit *u, const
                                  false, true, false, u);
                 if (r < 0)
                         return r;
+
+
+                if (UNIT_HAS_EXEC_CONTEXT(u) &&
+                    !verify_mount_ns_config(unit_get_exec_context(u))) {
+                        log_unit_warning(u, "In unit %s, option UseRootFileSystemNamespace=true is incompatible with "
+                                            "file system namespace related options: PrivateTmp, PrivateDevices, "
+                                            "ProtectSystem, ProtectHome, ReadOnlyPaths, InaccessiblePaths and   "
+                                            "ReadWritePaths", u->id);
+                        return -EINVAL;
+                }
         }
 
         free(u->fragment_path);
diff -rup systemd-233/src/core/load-fragment-gperf.gperf.m4 systemd-233-new/src/core/load-fragment-gperf.gperf.m4
--- systemd-233/src/core/load-fragment-gperf.gperf.m4	2017-03-01 22:43:06.000000000 +0100
+++ systemd-233-new/src/core/load-fragment-gperf.gperf.m4	2017-03-14 16:33:01.683884659 +0100
@@ -94,6 +94,7 @@ $1.BindPaths,                    config_
 $1.BindReadOnlyPaths,            config_parse_bind_paths,            0,                             offsetof($1, exec_context)
 $1.PrivateTmp,                   config_parse_bool,                  0,                             offsetof($1, exec_context.private_tmp)
 $1.PrivateDevices,               config_parse_bool,                  0,                             offsetof($1, exec_context.private_devices)
+$1.UseRootFileSystemNamespace,   config_parse_bool,                  0,                             offsetof($1, exec_context.use_root_file_system_namespace)   
 $1.ProtectKernelTunables,        config_parse_bool,                  0,                             offsetof($1, exec_context.protect_kernel_tunables)
 $1.ProtectKernelModules,         config_parse_bool,                  0,                             offsetof($1, exec_context.protect_kernel_modules)
 $1.ProtectControlGroups,         config_parse_bool,                  0,                             offsetof($1, exec_context.protect_control_groups)
