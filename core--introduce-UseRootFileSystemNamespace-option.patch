commit 48b462c31bdcb7156a2d7a34d5addb8e9421e42e
Author: Marcin Pawlowski <mpawlowski@fb.com>
Date:   Wed Aug 10 16:01:06 2016 -0700

    yummy:patchX:core--introduce-UseRootFileSystemNamespace-option.patch

core: introduce UseRootFileSystemNamespace option

    
    Allow user to specify that unit has to run in init's files system
    namespace. Previously it was possible, iff none of the file system
    namespace related option was set (but documentation gave no such
    warranty). I wanted to have a formal and documented option which
    forces such behavior. This option is incompatible with: PrivateTmp=,
    PrivateDevices=, ProtectSystem=, ProtectHome=, ReadOnlyPaths=,
    InaccessiblePaths=, ReadWritePaths=, MountFlags=, meaning it
    cannot be set to true, if any of the listed options has non default
    value.

NOTE: jsynacek: forward-ported from 231 to 233

diff -rup systemd-233/man/systemd.exec.xml systemd-233-new/man/systemd.exec.xml
--- systemd-233/man/systemd.exec.xml	2017-03-01 22:43:06.000000000 +0100
+++ systemd-233-new/man/systemd.exec.xml	2017-03-14 16:10:08.282034369 +0100
@@ -1203,6 +1203,26 @@
       </varlistentry>
 
       <varlistentry>
+        <term><varname>UseRootFileSystemNamespace=</varname></term>
+
+        <listitem><para>Takes a boolean argument (default is false).
+        Forces unit's process to start in the same file system namespace
+        as init (the namespace of systemd). Setting this option to
+        <literal>true</literal> disables all file system related options,
+        namely:
+        (<varname>MountFlags=</varname>,
+        <varname>PrivateTmp=</varname>,
+        <varname>PrivateDevices=</varname>,
+        <varname>ProtectSystem=</varname>,
+        <varname>ProtectHome=</varname>,
+        <varname>ReadOnlyPaths=</varname>,
+        <varname>InaccessiblePaths=</varname> and
+        <varname>ReadWritePaths=</varname>). If any of these options
+        is set, the unit is deemed incorrectly configured.
+        </para></listitem>
+      </varlistentry>
+
+      <varlistentry>
         <term><varname>MountFlags=</varname></term>
 
         <listitem><para>Takes a mount propagation flag: <option>shared</option>, <option>slave</option> or
diff -rup systemd-233/src/core/load-fragment.c systemd-233-new/src/core/load-fragment.c
--- systemd-233/src/core/load-fragment.c	2017-03-01 22:43:06.000000000 +0100
+++ systemd-233-new/src/core/load-fragment.c	2017-03-14 16:10:08.284034368 +0100
@@ -4137,6 +4137,25 @@ int config_parse_protect_system(
         return 0;
 }
 
+static bool verify_mount_ns_config(const ExecContext* context) {
+    assert(context);
+
+    if (!context->use_root_file_system_namespace)
+            return true;
+
+    if (context->private_tmp ||
+        context->private_devices ||
+        context->protect_system != PROTECT_SYSTEM_NO ||
+        context->protect_home != PROTECT_HOME_NO ||
+        context->mount_flags != 0 ||
+        !strv_isempty(context->read_write_paths) ||
+        !strv_isempty(context->read_only_paths) ||
+        !strv_isempty(context->inaccessible_paths))
+            return false;
+
+    return true;
+}
+
 #define FOLLOW_MAX 8
 
 static int open_follow(char **filename, FILE **_f, Set *names, char **_final) {
@@ -4365,6 +4384,16 @@ static int load_from_path(Unit *u, const
                                  false, true, false, u);
                 if (r < 0)
                         return r;
+
+
+                if (UNIT_HAS_EXEC_CONTEXT(u) &&
+                    !verify_mount_ns_config(unit_get_exec_context(u))) {
+                        log_unit_warning(u, "In unit %s, option UseRootFileSystemNamespace=true is incompatible with "
+                                            "file system namespace related options: PrivateTmp, PrivateDevices, "
+                                            "ProtectSystem, ProtectHome, ReadOnlyPaths, InaccessiblePaths and   "
+                                            "ReadWritePaths", u->id);
+                        return -EINVAL;
+                }
         }
 
         free(u->fragment_path);
